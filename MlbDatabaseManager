package org.example;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

/**
 * Manages the connection to the MLB database and updates player statistics.
 */
public class MlbDatabaseManager {
    private static final String DATABASE_PATH = "jdbc:sqlite:MLBdatabase.db";


    // Add mappings


        public MlbDatabaseManager(){

        }
    //private Connection connection; // Connection for the database


    /**
     * Constructs an instance of MlbDatabaseManager, establishes a connection to the database,
     * and initializes the web scraping API.
     */
    protected Connection ConnectToDataBase() {
        Connection connection = null;
        try {
            // Load the SQLite JDBC driver
            Class.forName("org.sqlite.JDBC");

            // Connect to the database
            connection = DriverManager.getConnection(DATABASE_PATH);

            System.out.println("Connected to the MLB database.");

            // Initialize the web scraping API
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return connection;
    }


    public void makeCSV() {
        MlbAPI scraper = new MlbAPI();
        boolean getSeasonStats = false, getGameLogs = false,getTeamStats = true; //temporarily set to false
        int pitcherFlag = 0, hitterFlag = 0;
        if (getSeasonStats) {


            Vector<String> pitchersSeason = new Vector<>(), hittersSeason = new Vector<>(), pitchersCareer = new Vector<>(), hittersCareer = new Vector<>();

            List<String> hitterLogs = new ArrayList();
            List<String> pitcherLogs = new ArrayList<>();
            ;
            List teams = scraper.updateStatsSeasonCareer();
            for (Object team : teams) {
                String playerName = "";


                for (Object player : (List) team) {
                    List<?> playerStats = (List<?>) player;
                    String checkString = (String) playerStats.get(playerStats.size() - 1);

                    if (!checkString.contains("Minors Career")) {
                        checkString = (String) playerStats.get(0);

                        if (checkString.contains("AB")) {
                            addDataToVectorSeasons(playerStats, hittersSeason, hittersCareer, hitterFlag);
                            hitterFlag = 1;
                        } else {
                            addDataToVectorSeasons(playerStats, pitchersSeason, pitchersCareer, pitcherFlag);
                            pitcherFlag = 1;
                        }
                    }
                }
                // Write the collected data to files
                writeDataToFile("hittersSeason.csv", hittersSeason);
                writeDataToFile("hittersCareer.csv", hittersCareer);
                writeDataToFile("pitchersSeason.csv", pitchersSeason);
                writeDataToFile("pitchersCareer.csv", pitchersCareer);
            }


        }
        if (getGameLogs) {
            Vector<String> pitchersGameLogs = new Vector<>(), hittersGameLogs = new Vector<>();
            List gameLogs = scraper.updateGameLogs();
            hitterFlag = 0;
            pitcherFlag = 0;//set the flags to zero
            for (Object team : gameLogs) {

                for (Object player : (List) team) {
                    List<?> playerStats = (List<?>) player;
                    String checkString = (String) playerStats.get(playerStats.size() - 1);

                    if (!checkString.contains("Minors Career")) {
                        checkString = (String) playerStats.get(0);

                        if (checkString.contains("AB")) {
                            addDataToVectorGameLogs(playerStats, hittersGameLogs, hitterFlag);
                            hitterFlag = 1;
                        } else {
                            addDataToVectorGameLogs(playerStats, pitchersGameLogs, pitcherFlag);
                            pitcherFlag = 1;
                        }
                    }
                }
                // Write the collected data to files
                writeDataToFile("hittingGameLogs.csv", hittersGameLogs);
                writeDataToFile("pitchingGameLogs.csv", pitchersGameLogs);
            }
        }

        if(getTeamStats) {
            Vector<String> teamStats = new Vector<>();
            addDataToVectorGameLogs(scraper.fetchTeamStats('h'), teamStats, 0);
            writeDataToFile("teamHitting.csv", teamStats);
            teamStats.clear();
            addDataToVectorGameLogs(scraper.fetchTeamStats('p'), teamStats, 0);
            writeDataToFile("teamPitching.csv", teamStats);
        }


    }

    /**
     * Writes data to a file with the specified name.
     *
     * @param fileName The name of the file.
     * @param data     The data to be written to the file.
     */
    private void writeDataToFile(String fileName, Vector<String> data) {
        try (FileWriter fileWriter = new FileWriter(fileName)) {
            for (String line : data) {
                fileWriter.write(line);
                fileWriter.write(System.lineSeparator());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Adds player statistics to the specified vector.
     *
     * @param playerStats The statistics of the player.
     * @param seasons     The vector to which the season stat line data should be added.
     * @param careers     The vector to which the career stat line data should be added.
     * @param flag        The flag indicating the current state.
     */
    private String addDataToVectorSeasons(List<?> playerStats, Vector<String> seasons, Vector<String> careers, int flag) {
        for (Object line : playerStats.subList(flag, playerStats.size() - 1)) {
            seasons.add((String) line);
        }
        if (flag == 0)
            careers.add((String) playerStats.get(0));
        careers.add((String) playerStats.get(playerStats.size() - 1));
        String playerNameAndId = (String) playerStats.get(1);
        String playerNameAndIdArr[] = playerNameAndId.split(",");
        playerNameAndId = playerNameAndIdArr[0] + "," + playerNameAndIdArr[1];
        return playerNameAndId.toLowerCase();
    }

    private void addDataToVectorGameLogs(List<?> playerStats, Vector<String> seasons, int flag) {
        for (Object line : playerStats.subList(flag, playerStats.size())) {
            seasons.add((String) line);
        }
    }

    private boolean UpdateTables(String csvFilePath, String tableName) throws SQLException {
        List<String> data = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                data.add(line);
            }
            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        Connection connection = ConnectToDataBase();
        try (Statement statement = connection.createStatement()) {
            String tableHeaderArr[] = data.get(0).replace(" ", "_").replace("/", "").split(",");
            String formater[] = data.get(1).replace(" ", "_").replace("/", "").split(",");
            String tableHeader = "", insertHeader = data.get(0).replace(" ", "_").replace("/", "").replace("2B","Doubles").replace("3B","Triples").replace("-","").replace("/","");
            for (int i = 0; i < tableHeaderArr.length; i++) {
                if(tableHeaderArr[i].contains("2B"))
                    tableHeaderArr[i] = "Doubles ";
                if(tableHeaderArr[i].contains("3B"))
                    tableHeaderArr[i] = "Triples ";

                tableHeaderArr[i]+=FindType(formater[i]);


                if(tableHeaderArr[i].contains("Player_ID")||tableHeaderArr[i].contains("TEAM"))
                    tableHeaderArr[i]+="PRIMARY KEY";
                tableHeaderArr[i]+=",\n";
                tableHeader+=tableHeaderArr[i];

            }
            tableHeader = tableHeader.substring(0,tableHeader.length()-2);
            String deleteTable = "DROP TABLE IF EXISTS " + tableName + ";";
            statement.executeUpdate(deleteTable);
            String createTableSQL = String.format("CREATE TABLE IF NOT EXISTS %s (%s) ;", tableName, tableHeader);
            statement.executeUpdate(createTableSQL);
            data.remove(0);
            String line = "";
            while(!data.isEmpty()) {
                line = data.get(0);
                String statLine[] = line.replace(" ", "_").replace("-","&").replace("/","_").split(",");
                String insertStatement = String.format("INSERT INTO %s (%s) VALUES (", tableName, insertHeader);
                String stat = "";
                for (int i = 0; i < statLine.length; i++) {
                    stat = statLine[i];
                    if (stat.length() != 0) {
                        if (!stat.contains("-"))
                            insertStatement += String.format("'%s',", statLine[i]);
                        else
                            insertStatement += "NULL,";
                    }
                }
                insertStatement = insertStatement.substring(0,insertStatement.length()-1) + ");";
                System.out.println(insertStatement);
                statement.executeUpdate(insertStatement);
                data.remove(0);
            }

            String distinctify = String.format("CREATE TEMPORARY TABLE TEMP AS\n" +
                    "SELECT DISTINCT * FROM %s ;\n", tableName);
            distinctify += String.format("DELETE FROM %s;\n", tableName);
            distinctify += String.format("INSERT INTO %s SELECT * FROM TEMP;\n", tableName);
            distinctify += "DROP TABLE TEMP;";
            statement.executeLargeUpdate(distinctify);
            connection.close();
        } catch (SQLException s) {
            s.printStackTrace();
        }
        return true;
    }

    private String FindType(String input) {
        try {
            // Try parsing as float
            int intValue = Integer.parseInt(input);
            return " INTEGER";
        } catch (NumberFormatException eFloat) {
            try {
                // If parsing as float fails, try parsing as int
                float intValue = Float.parseFloat(input);
                return " REAL";
            } catch (NumberFormatException eInt) {
                return " TEXT";
            }
        }
    }
    public void UpdateDatabase() throws SQLException {
        UpdateTables("hittersSeason.csv", "HittersSeasonTable");
        UpdateTables("hittersCareer.csv", "HittersCareerTable");
        UpdateTables("pitchersSeason.csv", "PitchersSeasonTable");
        UpdateTables("pitchersCareer.csv", "PitchersCareerTable");
        UpdateTables("hittingGameLogs.csv", "HittingLogTable");
        UpdateTables("pitchingGameLogs.csv", "PitchingLogTable");
        UpdateTables("teamPitching.csv", "TeamPitchingTable");
        UpdateTables("teamHitting.csv", "TeamHittingTable");
    }
}

/**
 * Closes resources.
 */
//    public void closeResources() {
//        // Close the web scraping API
//        if (scraper != null) {
//            scraper.close(); // Assuming MlbAPI implements AutoCloseable or Closeable
//        }
//    }
