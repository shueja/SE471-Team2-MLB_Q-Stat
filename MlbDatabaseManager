package org.example;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import java.util.HashSet;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.io.BufferedReader;
import java.io.FileReader;

/**
 * Manages the connection to the MLB database and updates player statistics.
 */
public class MlbDatabaseManager {
    // String static createTableScript = ;
    private static final String DATABASE_PATH = "jdbc:sqlite:MLBdatabase.db";

    //private Connection connection; // Connection for the database


    /**
     * Constructs an instance of MlbDatabaseManager, establishes a connection to the database,
     * and initializes the web scraping API.
     */
    private Connection ConnectToDataBase() {
        Connection connection = null;
        try {
            // Load the SQLite JDBC driver
            Class.forName("org.sqlite.JDBC");

            // Connect to the database
            connection = DriverManager.getConnection(DATABASE_PATH);

            System.out.println("Connected to the MLB database.");

            // Initialize the web scraping API
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
        return connection;
    }


    public void makeCSV() {
        MlbAPI scraper = new MlbAPI();
        boolean getPlayerStats = false; //temporarily set to false
        if (getPlayerStats) {

            int pitcherFlag = 0, hitterFlag = 0;
            Vector<String> pitchersSeason = new Vector<>(), hittersSeason = new Vector<>(), pitchersCareer = new Vector<>(), hittersCareer = new Vector<>(),
                    pitchersGameLogs = new Vector<>(), hittersGameLogs = new Vector<>();
            List<String> hitterLogs = new ArrayList();
            List<String> pitcherLogs = new ArrayList<>();
            ;
            List teams = scraper.updateStatsSeasonCareer();
            for (Object team : teams) {
                String playerName = "";


                for (Object player : (List) team) {
                    List<?> playerStats = (List<?>) player;
                    String checkString = (String) playerStats.get(playerStats.size() - 1);

                    if (!checkString.contains("Minors Career")) {
                        checkString = (String) playerStats.get(0);

                        if (checkString.contains("AB")) {
                            addDataToVector(playerStats, hittersSeason, hittersCareer, hitterFlag);
                            hitterFlag = 1;
                        } else {
                            addDataToVector(playerStats, pitchersSeason, pitchersCareer, pitcherFlag);
                            pitcherFlag = 1;
                        }
                    }
                }
                // Write the collected data to files
                writeDataToFile("hittersSeason.csv", hittersSeason);
                writeDataToFile("hittersCareer.csv", hittersCareer);
                writeDataToFile("pitchersSeason.csv", pitchersSeason);
                writeDataToFile("pitchersCareer.csv", pitchersCareer);
            }

//            hitterFlag = 0;
//            pitcherFlag = 0;
//            for (Object player : (List) hitting) {
//                List<?> playerStats = (List<?>) player;
//                addDataToVector(playerStats, hittersGameLogs, hittersCareer, hitterFlag);
//                hitterFlag = 1;
//            }
//            for (Object player : (List) pitching) {
//                List<?> playerStats = (List<?>) player;
//                addDataToVector(playerStats, pitchersGameLogs, hittersCareer, pitcherFlag);
//                pitcherFlag = 1;
//            }
            teams = scraper.updateGameLogs();
            for (Object team : teams) {
                String playerName = "";


                for (Object player : (List) team) {
                    List<?> playerStats = (List<?>) player;
                    String checkString = (String) playerStats.get(playerStats.size() - 1);

                    if (!checkString.contains("Minors Career")) {
                        checkString = (String) playerStats.get(0);

                        if (checkString.contains("AB")) {
                            addDataToVector(playerStats, hittersGameLogs, hittersCareer, hitterFlag);
                            hitterFlag = 1;
                        } else {
                            addDataToVector(playerStats, pitchersGameLogs, pitchersCareer, pitcherFlag);
                            pitcherFlag = 1;
                        }
                    }
                }
                // Write the collected data to files
                writeDataToFile("hittingGameLogs.csv", hittersGameLogs);
                writeDataToFile("pitchingGameLogs.csv", pitchersGameLogs);
            }

        }
        Vector<String> teamStats = new Vector<>();
        addDataToVector(scraper.fetchTeamStats('h'), teamStats, 1);
        writeDataToFile("leagueHittingStats.csv", teamStats);
        teamStats.clear();
        addDataToVector(scraper.fetchTeamStats('p'), teamStats, 1);
        writeDataToFile("leaguePitchingStats.csv", teamStats);


    }

    /**
     * Writes data to a file with the specified name.
     *
     * @param fileName The name of the file.
     * @param data     The data to be written to the file.
     */
    private void writeDataToFile(String fileName, Vector<String> data) {
        try (FileWriter fileWriter = new FileWriter(fileName)) {
            for (String line : data) {
                fileWriter.write(line);
                fileWriter.write(System.lineSeparator());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Adds player statistics to the specified vector.
     *
     * @param playerStats The statistics of the player.
     * @param seasons     The vector to which the season stat line data should be added.
     * @param careers     The vector to which the career stat line data should be added.
     * @param flag        The flag indicating the current state.
     */
    private void addDataToVector(List<?> playerStats, Vector<String> seasons, Vector<String> careers, int flag) {
        for (Object line : playerStats.subList(flag, playerStats.size() - 1)) {
            seasons.add((String) line);
        }
        if (flag == 0)
            careers.add((String) playerStats.get(0));
        careers.add((String) playerStats.get(playerStats.size() - 1));
    }

    private void addDataToVector(List<?> teamStats, Vector<String> teams) {
        for (Object line : teamStats) {
            teams.add((String) line);
        }
    }


    public void createTableFromCsv(String csvFilePath, String tableName) {
        try (Connection connection = DriverManager.getConnection(DATABASE_PATH);
             Statement statement = connection.createStatement()) {

            // Read the first line of the CSV file to get column names
            BufferedReader reader = new BufferedReader(new FileReader(csvFilePath));
            String headerLine = reader.readLine();
            reader.close();

            // Split the header line into column names
            String[] columnNames = headerLine.split(",");

            // Build the CREATE TABLE SQL statement without specifying data types
            statement.executeUpdate("DROP TABLE IF EXISTS" + tableName +";");
            StringBuilder createTableSQL = new StringBuilder("CREATE TABLE IF NOT EXISTS ");
            createTableSQL.append(tableName).append(" (");

            for (String columnName : columnNames) {
                createTableSQL.append(columnName.trim()).append(", ");
            }

            // Remove the trailing comma and add closing parenthesis
            createTableSQL.delete(createTableSQL.length() - 2, createTableSQL.length()).append(");");

            // Execute the CREATE TABLE statement
            statement.executeUpdate(createTableSQL.toString());

            // Import data from CSV into the table
            String importSQL = String.format("INSERT INTO %s SELECT * FROM csvREAD('%s');", tableName, csvFilePath);
            statement.executeUpdate(importSQL);

            System.out.println("Table created and CSV data imported successfully.");

        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }
}



/**
 * Closes resources.
 */
//    public void closeResources() {
//        // Close the web scraping API
//        if (scraper != null) {
//            scraper.close(); // Assuming MlbAPI implements AutoCloseable or Closeable
//        }
//    }
